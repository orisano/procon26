#include "../BitBoard.hpp"
#include "../BitTile.hpp"
#include "../CacheTile.hpp"
#include <cassert>
#include <cstdio>
#include <vector>
#include <string>

namespace {

template<typename T>
inline void dumpBin(T x){
    for (int i = 0; i < sizeof(T) * 8; i++){
        std::printf("%d", (x >> i) & 1);
    }
    std::printf("\n");
}

template<typename T>
inline void dumpData(const T& data){
    std::puts("---------------------------------");
    for (int i = 0; i < T::SIZE; i++){
        dumpBin(data.data[i]);
    }
    std::puts("---------------------------------");
}

}

using namespace std;
using namespace procon26;
using namespace procon26::tile;
using namespace procon26::board;

int main()
{
    vector<string> data_board {
            "11001001000000000000000000000000",
            "11000000000000000000000000000000",
            "11001001000000000000000000000000",
            "00000000000000000000000000000000",
            "00000000000000000000000000000000",
            "00000100000000000000000000000000",
            "00000000000000000000000000000000",
            "00000000000000000000000000000000",
            "00000001000000000000000000000000",
            "00000000000000000000000000000000",
            "00000000000000000000000000000000",
            "00000000000000000000000000000000",
            "00000000000000000000000000000000",
            "00000010000000000000000000000000",
            "00000000000000000000000000000000",
            "00000000000000000000000000000000",
            "00000000000000000000000000000000",
            "00000000000000000000000000000000",
            "00000000000000000000000000000000",
            "00000000000000000000000000000000",
            "00000000000000000000000000000000",
            "00000000000000000000000000000000",
            "00000000000000000000000000000000",
            "00000000000000000000000000000000",
            "00000000000000000000000000000000",
            "00000000000000000000000000000000",
            "00000000000000000000000000000000",
            "00000000000000000000000000000000",
            "00000000000000000000000000000000",
            "00000000000000000000000000000000",
            "00000000000000000000000000000000",
            "00000000000000000000000000000000",
    };
    Board raw_board;
    raw_board.load(data_board.begin());

    vector<string> data_tile_1 {
            "11100000",
            "01000000",
            "01100000",
            "00000000",
            "00000000",
            "00000000",
            "00000000",
            "00000000",
    };
    vector<string> data_tile_2 {
            "01000000",
            "11110000",
            "01000000",
            "00000000",
            "00000000",
            "00000000",
            "00000000",
            "00000000",
    };
    Tile raw_tile_1;
    raw_tile_1.load(data_tile_1.begin());
    Tile raw_tile_2;
    raw_tile_2.load(data_tile_2.begin());

    BitBoard board(raw_board);
    CacheTile<BitTile> tile_1((BitTile(raw_tile_1)));
    CacheTile<BitTile> tile_2((BitTile(raw_tile_2)));

    dumpData(board);
    dumpData(tile_1.value());
    dumpData(tile_2.value());

    return 0;
}